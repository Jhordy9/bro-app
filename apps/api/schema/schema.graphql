"""The root of all... queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  me: User
  version: String!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""User data"""
type User implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  name: String
  email: String
  createdAt: String
  updatedAt: String
}

type Mutation {
  UserLogin(input: UserLoginInput!): UserLoginPayload
  UserRegister(input: UserRegisterInput!): UserRegisterPayload
}

type UserLoginPayload {
  token: String
  me: User

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input UserLoginInput {
  email: String!
  password: String!
  clientMutationId: String
}

type UserRegisterPayload {
  token: String
  me: User

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input UserRegisterInput {
  name: String!
  email: String!
  password: String!
  clientMutationId: String
}