"""The root of all... queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  me: User
  posts(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): PostConnection!
  version: String!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""User data"""
type User implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  name: String
  email: String
  availableToPost: String
  createdAt: String
  updatedAt: String
}

"""A connection to a list of items."""
type PostConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]!
}

"""A connection to a list of items."""
interface Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post

  """A cursor for use in pagination."""
  cursor: String!
}

"""Post data"""
type Post implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  author: User
  likesCount: Int!

  """whether logged user liked this post"""
  meHasLiked: Boolean!
  createdAt: String
  updatedAt: String
}

type Mutation {
  UserLogin(input: UserLoginInput!): UserLoginPayload
  UserRegister(input: UserRegisterInput!): UserRegisterPayload
  PostCreate(input: PostCreateInput!): PostCreatePayload
  PostLikeMutation(input: PostLikeInput!): PostLikePayload
  PostUnlikeMutation(input: PostUnLikeInput!): PostUnLikePayload
}

type UserLoginPayload {
  token: String
  me: User

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input UserLoginInput {
  email: String!
  password: String!
  clientMutationId: String
}

type UserRegisterPayload {
  token: String
  me: User

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input UserRegisterInput {
  name: String!
  email: String!
  password: String!
  clientMutationId: String
}

type PostCreatePayload {
  postEdge: PostEdge

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input PostCreateInput {
  clientMutationId: String
}

type PostLikePayload {
  post: Post

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input PostLikeInput {
  post: ID!
  clientMutationId: String
}

type PostUnLikePayload {
  post: Post

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input PostUnLikeInput {
  post: ID!
  clientMutationId: String
}

type Subscription {
  PostNew(input: PostNewInput!): PostNewPayload
}

type PostNewPayload {
  post: Post
  clientSubscriptionId: String
}

input PostNewInput {
  clientSubscriptionId: String
}